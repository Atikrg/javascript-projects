208.

//create constructor
//constructor starts with capital letter
const Person = function(firstName, birthYear){
    console.log(this);
    //Instance properties
    this.firstName = firstName;
    this.birthYear = birthYear;
    //Not to create method inside a constructor 
    /* this.calcAge = function(){
        console.log(2037 - this.birthYear);
    } */
};

const jonas = new Person('Jonas', 1991);
console.log(jonas);
//1. New {} is created
//2. function is called, this = {}
//3. {} linked to prototype
//4. function automatically returns {}

const atik = new Person("Atik", '2001');
console.log(atik);
//returns boolean value
console.log(atik instanceof Person) 

209. 
//Prototype
console.log(Person.prototype)
Person.prototype.calcAge = function(){
    console.log("hello")
}
jonas.calcAge();
atik.calcAge();

//see jonas prototype
console.log(jonas.__proto__);
//check if jonas prototype belongs to person contructor prototype
console.log(jonas.__proto__ === Person.prototype);
console.log(Person.prototype.isPrototypeOf(jonas));//returns true
console.log(Person.prototype.isPrototypeOf(Person));//returns false

//.prototypeOfLinkedObjects
Person.prototype.species = 'Homo Sapiens'
console.log(jonas, atik)
console.log(jonas.hasOwnProperty('firstName'));
console.log(jonas.hasOwnProperty('species'))// return false because of prototype

220.
//220.
class PersonCl {
  constructor(fullName, birthYear) {
    this.fullName = fullName;
    this.birthYear = birthYear;
  }
  //instance methods
  calcAge() {
    console.log(2022 - this.birthYear);
  }
  set fullName(name) {
    if (name.includes('')) this._fullName = name;
    else alert(`${name} is not a full name!`);
  }
  get fullName() {
    return this._fullName;
  }
  //static methods
  static hey() {
    console.log('Hey there🍕');
  }
}
class StudentCl extends PersonCl {
  constructor(fullName, birthYear, course) {
    //Always need to happen first!
    super(fullName, birthYear);
    this.course = course;
  }
  introduce() {
    console.log(`My name is ${this.fullName} and I study ${this.course}`);
  }
  calcAge() {
    console.log(`I am ${2022 - this.birthYear} year old`);
  }
}

const atik = new StudentCl('atik rangnekar', 2001, 'Computer Science');
atik.introduce();
atik.calcAge();

const muhammed = new StudentCl('gamti', 1997, 'pubg');
muhammed.introduce();

//224
// Public fields
// Private fields
// public methods
// Private methods
// Also a static function
class Account{
  //[1] public fields (instances)
  locale = navigator.language;
  
  // 2. Private fields
  #movements = [];
  #pin;
  constructor(owner, currency, pin){
    this.owner = owner;
    this.currency = currency;
    //protected property
    this.#pin = pin;

    /* this._movements = [];
    this.locale = navigator.language; */
    
    console.log(`Thanks for opening an account, ${owner}`);
  }
  //public interface
  getMovements(){
    return this.#movements;
  }
  deposit(val){
    this.#movements.push(val);
  }
  withdraw(val){
    this.deposit(-val);
  }
  _approveLoan(val){
    return true;
  }
  requestLoan(val){
    if(this._approveLoan(val)){
      this.deposit(val);
      console.log(`Loan approved`)
    }
  }
  static helper(){
    console.log('Helper');
    }
  //Private methods
  #approveLoan(val){
    return true;
  }
}
const acc1 = new Account('Jonas', 'EUR', 1111);
/* acc1.movements.push(250);
acc1.movements.push(-140); */
acc1.deposit(250);
acc1.withdraw(140);
console.log(acc1);
console.log(acc1.pin);
//returns error 
//this means movements and pin are protected
//console.log(acc1.#movements);
//console.log(acc1.#pin);
//console.log(acc1.#approveLoan(100));
Account.helper()